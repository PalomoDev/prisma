import NextAuth from "next-auth"
import Credentials from "@auth/core/providers/credentials";
import { PrismaAdapter } from "@auth/prisma-adapter";
import { prisma } from "@/db/prisma";
import { compare } from "@/lib/encrypt";
import { cookies } from "next/headers";
import { NextResponse } from "next/server";

const adapter = PrismaAdapter(prisma as any)

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è NextAuth –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç JWT —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ Credentials –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ email/–ø–∞—Ä–æ–ª—é
 */
export const { auth, handlers, signIn, signOut } = NextAuth({
    adapter,
    providers: [
        Credentials({
            name: "Credentials",
            credentials: {
                email: { label: "Email", type: "text", placeholder: "<EMAIL>" },
                password: { label: "Password", type: "password" }
            },
            /**
             * –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
             * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
             * @param credentials - –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (email –∏ –ø–∞—Ä–æ–ª—å)
             * @returns –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ null –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
             */
            async authorize(credentials) {
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                if (!credentials?.email || !credentials?.password) {
                    console.log('‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
                    return null;
                }

                try {
                    console.log('üîç –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è:', credentials.email);

                    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    const user = await prisma.user.findUnique({
                        where: {
                            email: credentials.email as string
                        }
                    });

                    if (!user) {
                        console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: ${credentials.email}`);
                        return null;
                    }

                    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', {
                        id: user.id,
                        email: user.email,
                        hasPassword: !!user.password
                    });

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞—Ä–æ–ª—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if (!user.password) {
                        console.log('‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–æ–ª—å (–≤–æ–∑–º–æ–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç OAuth)');
                        return null;
                    }

                    // === –ü–†–û–¶–ï–°–° –°–†–ê–í–ù–ï–ù–ò–Ø –ü–ê–†–û–õ–ï–ô ===
                    console.log('üîê === –ù–ê–ß–ê–õ–û –°–†–ê–í–ù–ï–ù–ò–Ø –ü–ê–†–û–õ–ï–ô ===');
                    console.log('üìù –î–ª–∏–Ω–∞ —Ö–µ—à–∞ –≤ –ë–î:', user.password.length);
                    console.log('üìù –ü–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ —Ö–µ—à–∞:', user.password.substring(0, 10) + '...');

                    const startTime = Date.now();
                    const isPasswordValid = await compare(
                        credentials.password as string,
                        user.password as string
                    );
                    const compareTime = Date.now() - startTime;

                    console.log('‚è±Ô∏è –í—Ä–µ–º—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π:', compareTime, '–º—Å');
                    console.log('üîê –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:', isPasswordValid ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –ù–ï–£–î–ê–ß–ê');
                    console.log('üîê === –ö–û–ù–ï–¶ –°–†–ê–í–ù–ï–ù–ò–Ø –ü–ê–†–û–õ–ï–ô ===');

                    if (!isPasswordValid) {
                        console.log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", credentials.email);
                        return null;
                    }

                    console.log('‚úÖ === –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê ===');
                    console.log('üë§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
                        id: user.id,
                        name: user.name,
                        email: user.email,
                        role: user.role
                    });

                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –ø–∞—Ä–æ–ª—è!)
                    return {
                        id: user.id,
                        name: user.name,
                        email: user.email,
                        role: user.role
                    };
                } catch (error) {
                    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error);
                    return null;
                }
            }
        })
    ],

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è JWT —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏ 30 –¥–Ω–µ–π
     */
    session: {
        strategy: "jwt",
        maxAge: 30 * 24 * 60 * 60, // 30 –¥–Ω–µ–π
    },

    /**
     * –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    pages: {
        signIn: '/login',
        error: '/login',
    },

    /**
     * –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ - –≤–∫–ª—é—á–µ–Ω —Ç–æ–ª—å–∫–æ –≤ development –æ–∫—Ä—É–∂–µ–Ω–∏–∏
     */
    debug: process.env.NODE_ENV === "development",

    callbacks: {
        /**
         * Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Å—Å–∏–∏
         * –î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞ –≤ –æ–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏
         * @param session - –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è
         * @param user - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
         * @param trigger - –¢—Ä–∏–≥–≥–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
         * @param token - JWT —Ç–æ–∫–µ–Ω
         * @returns –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏
         */
        async session({ session, user, trigger, token }: any) {
            console.log('üîÑ === SESSION CALLBACK ===');
            console.log('üì¶ Token –¥–∞–Ω–Ω—ã–µ:', {
                sub: token.sub,
                name: token.name,
                role: token.role
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–æ–∫–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏—é
            session.user.id = token.sub;
            session.user.name = token.name;
            session.user.role = token.role;

            console.log('‚úÖ –°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', {
                userId: session.user.id,
                userName: session.user.name,
                userRole: session.user.role
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (trigger === 'update') {
                session.user.name = user.name;
                console.log('üîÑ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', user.name);
            }

            return session;
        },

        /**
         * JWT Callback
         * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –ø—Ä–∏ –≤—Ö–æ–¥–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
         * –¢–∞–∫–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É
         * @param token - JWT —Ç–æ–∫–µ–Ω
         * @param user - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ)
         * @param trigger - –¢—Ä–∏–≥–≥–µ—Ä —Å–æ–±—ã—Ç–∏—è
         * @param session - –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (–ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏)
         * @returns –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
         */
        async jwt({ token, user, trigger, session }: any) {
            console.log('üé´ === JWT CALLBACK ===');

            // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–æ–∫–µ–Ω
            if(user) {
                console.log('üë§ –ù–æ–≤—ã–π –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
                    id: user.id,
                    email: user.email,
                    role: user.role
                });

                token.id = user.id;
                token.role = user.role;

                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–∏ –≤—Ö–æ–¥–µ
                if (trigger === 'signIn' || trigger === 'signUp') {
                    console.log('üõí –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã...');

                    const cookiesObject = await cookies();
                    const sessionCartId = cookiesObject.get('sessionCartId')?.value;

                    if (sessionCartId) {
                        const sessionCart = await prisma.cart.findFirst({
                            where: {sessionCartId},
                        });

                        if (sessionCart) {
                            console.log('üõí –ù–∞–π–¥–µ–Ω–∞ —Å–µ—Å—Å–∏–æ–Ω–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞:', sessionCart.id);

                            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            const deletedCarts = await prisma.cart.deleteMany({
                                where: {userId: user.id},
                            });
                            console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∫–æ—Ä–∑–∏–Ω:', deletedCarts.count);

                            // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                            await prisma.cart.update({
                                where: {id: sessionCart.id},
                                data: {userId: user.id},
                            });
                            console.log('‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
                        }
                    }
                }

                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø—Ä–∏ —Ç—Ä–∏–≥–≥–µ—Ä–µ update
                if (session?.user.name && trigger === 'update') {
                    token.name = session.user.name;
                    console.log('üîÑ –ò–º—è –≤ —Ç–æ–∫–µ–Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', session.user.name);
                }
            }

            console.log('üé´ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω:', {
                sub: token.sub,
                name: token.name,
                role: token.role
            });

            return token;
        },
    },
});

