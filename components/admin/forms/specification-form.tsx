'use client'

import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { specificationDefaultValues, SPECIFICATION_TYPES } from "@/lib/constants";
import { createSpecification } from "@/lib/actions/spec-features.actions";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Checkbox } from "@/components/ui/checkbox";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { z } from "zod";
import { useRouter } from "next/navigation";
import { Category } from "@/types";
import { useState } from "react";
import { toast } from "sonner";
import {
    CreateSpecificationWithCategoriesInput,
    createSpecificationWithCategoriesSchema
} from "@/lib/validations/specs-features.validation"; // –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à toast –∫–æ–º–ø–æ–Ω–µ–Ω—Ç





interface CreateSpecificationFormProps {
    categories: Category[];
}

const CreateSpecificationForm = ({ categories }: CreateSpecificationFormProps) => {
    const [serverError, setServerError] = useState<string>('');

    const form = useForm<CreateSpecificationWithCategoriesInput>({
        resolver: zodResolver(createSpecificationWithCategoriesSchema),
        defaultValues: specificationDefaultValues,
        mode: 'onChange'
    });

    const router = useRouter();

    const handleNameChange = (value: string) => {
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è key
        const generatedKey = value
            .toLowerCase()
            .replace(/[^a-zA-Z0-9\s]/g, '') // —É–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
            .trim()
            .replace(/\s+/g, '-'); // –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã

        form.setValue('key', generatedKey, {
            shouldValidate: true,
            shouldDirty: true
        });
    };

    const handleSubmit = async (values: CreateSpecificationWithCategoriesInput) => {
        try {
            setServerError(''); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
            console.log('üöÄ Form submitting with values:', values);

            const res = await createSpecification(values);
            console.log('üìù Response from server:', res);

            if (res.success) {
                toast.success(res.message || '–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
                form.reset(specificationDefaultValues);
                router.push('/admin/products/specifications');
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
                setServerError(res.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏');
                toast.error(res.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏');
            }
        } catch (error) {
            console.error('‚ùå Client error creating specification:', error);
            const errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏';
            setServerError(errorMessage);
            toast.error(errorMessage);
        }
    };

    const handleCancelForm = () => {
        router.push('/admin/products/specifications');
    };

    const isGlobal = form.watch('isGlobal');

    return (
        <div className="mx-auto py-6">
            <div className="mb-6">
                <h1 className="text-2xl font-bold">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é</h1>
                <p className="text-muted-foreground">–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞</p>
            </div>

            <Form {...form}>
                <form
                    onSubmit={form.handleSubmit(handleSubmit)}
                    className='space-y-8'
                    noValidate
                >
                    {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å–µ—Ä–≤–µ—Ä–∞ */}
                    {serverError && (
                        <div className="p-4 mb-4 text-sm text-red-800 rounded-lg bg-red-50 border border-red-200">
                            {serverError}
                        </div>
                    )}
                    {/* Name */}
                    <FormField
                        control={form.control}
                        name='name'
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>
                                    –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ <span className="text-red-500">*</span>
                                </FormLabel>
                                <FormControl>
                                    <Input
                                        placeholder='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏'
                                        {...field}
                                        onChange={(e) => {
                                            field.onChange(e);
                                            handleNameChange(e.target.value);
                                        }}
                                    />
                                </FormControl>
                                <FormDescription>
                                    –ù–∞–ø—Ä–∏–º–µ—Ä: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç", "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∫–æ–º—Ñ–æ—Ä—Ç–∞", "–í–µ—Å"
                                </FormDescription>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    {/* Key (read-only, auto-generated) */}
                    <FormField
                        control={form.control}
                        name='key'
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>
                                    –ö–ª—é—á <span className="text-red-500">*</span>
                                </FormLabel>
                                <FormControl>
                                    <Input
                                        placeholder='–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
                                        {...field}
                                        readOnly
                                        className="bg-muted"
                                    />
                                </FormControl>
                                <FormDescription>
                                    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
                                </FormDescription>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    {/* Type and Unit */}
                    <div className='flex flex-col md:flex-row gap-6 items-start'>
                        <FormField
                            control={form.control}
                            name='type'
                            render={({ field }) => (
                                <FormItem className='flex-1'>
                                    <FormLabel>
                                        –¢–∏–ø <span className="text-red-500">*</span>
                                    </FormLabel>
                                    <Select onValueChange={field.onChange} value={field.value}>
                                        <FormControl>
                                            <SelectTrigger>
                                                <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏" />
                                            </SelectTrigger>
                                        </FormControl>
                                        <SelectContent>
                                            {SPECIFICATION_TYPES.map((type) => (
                                                <SelectItem key={type.value} value={type.value}>
                                                    {type.label}
                                                </SelectItem>
                                            ))}
                                        </SelectContent>
                                    </Select>
                                    <FormDescription>
                                        –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
                                    </FormDescription>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />

                        <FormField
                            control={form.control}
                            name='unit'
                            render={({ field }) => (
                                <FormItem className='flex-1'>
                                    <FormLabel>
                                        –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
                                    </FormLabel>
                                    <FormControl>
                                        <Input
                                            placeholder='–∫–≥, —Å–º, ¬∞C, –ª'
                                            {...field}
                                            value={field.value || ''}
                                        />
                                    </FormControl>
                                    <FormDescription>
                                        –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                                    </FormDescription>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                    </div>

                    {/* Description */}
                    <FormField
                        control={form.control}
                        name='description'
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>
                                    –û–ø–∏—Å–∞–Ω–∏–µ
                                </FormLabel>
                                <FormControl>
                                    <Textarea
                                        placeholder='–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)'
                                        className='resize-none min-h-24'
                                        {...field}
                                        value={field.value || ''}
                                    />
                                </FormControl>
                                <FormDescription>
                                    –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                                </FormDescription>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    {/* Icon Path */}
                    <FormField
                        control={form.control}
                        name='icon'
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>
                                    –ü—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ
                                </FormLabel>
                                <FormControl>
                                    <Input
                                        placeholder='users, thermometer, weight, ruler'
                                        {...field}
                                        value={field.value || ''}
                                    />
                                </FormControl>
                                <FormDescription>
                                    –ò–º—è –∏–∫–æ–Ω–∫–∏ (Lucide, Heroicons) –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                                </FormDescription>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    {/* Is Global Checkbox */}
                    <FormField
                        control={form.control}
                        name='isGlobal'
                        render={({ field }) => (
                            <FormItem className='flex flex-row items-start space-x-3 space-y-0'>
                                <FormControl>
                                    <Checkbox
                                        checked={field.value}
                                        onCheckedChange={field.onChange}
                                        aria-label="–û–±—â–∞—è –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
                                    />
                                </FormControl>
                                <div className='space-y-1 leading-none'>
                                    <FormLabel>
                                        –û–±—â–∞—è –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                                    </FormLabel>
                                    <FormDescription>
                                        –≠—Ç–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
                                    </FormDescription>
                                </div>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    {/* Categories Selection (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ isGlobal) */}
                    {!isGlobal && (
                        <FormField
                            control={form.control}
                            name='categoryIds'
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>
                                        –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
                                    </FormLabel>
                                    <FormDescription>
                                        –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —ç—Ç–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è
                                    </FormDescription>
                                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 mt-3">
                                        {categories.map((category) => (
                                            <div key={category.id} className="flex items-center space-x-2">
                                                <Checkbox
                                                    checked={field.value?.includes(category.id) || false}
                                                    onCheckedChange={(checked) => {
                                                        const currentValue = field.value || [];
                                                        if (checked) {
                                                            field.onChange([...currentValue, category.id]);
                                                        } else {
                                                            field.onChange(currentValue.filter(id => id !== category.id));
                                                        }
                                                    }}
                                                    aria-label={`–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${category.name}`}
                                                />
                                                <label className="text-sm font-medium leading-none cursor-pointer">
                                                    {category.name}
                                                </label>
                                            </div>
                                        ))}
                                    </div>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                    )}

                    {/* Sort Order */}
                    <FormField
                        control={form.control}
                        name='sortOrder'
                        render={({ field }) => (
                            <FormItem className='max-w-xs'>
                                <FormLabel>
                                    –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ <span className="text-red-500">*</span>
                                </FormLabel>
                                <FormControl>
                                    <Input
                                        type='number'
                                        placeholder='0'
                                        {...field}
                                        onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : 0)}
                                    />
                                </FormControl>
                                <FormDescription>
                                    –ú–µ–Ω—å—à–∏–µ —á–∏—Å–ª–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–µ—Ä–≤—ã–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 0 –¥–ª—è –≤—ã—Å—à–µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.
                                </FormDescription>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    {/* Is Active Checkbox */}
                    <FormField
                        control={form.control}
                        name='isActive'
                        render={({ field }) => (
                            <FormItem className='flex flex-row items-start space-x-3 space-y-0'>
                                <FormControl>
                                    <Checkbox
                                        checked={field.value}
                                        onCheckedChange={field.onChange}
                                        aria-label="–ê–∫—Ç–∏–≤–Ω–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è"
                                    />
                                </FormControl>
                                <div className='space-y-1 leading-none'>
                                    <FormLabel>
                                        –ê–∫—Ç–∏–≤–Ω–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è
                                    </FormLabel>
                                    <FormDescription>
                                        –≠—Ç–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–æ–≤–∞—Ä–∞—Ö
                                    </FormDescription>
                                </div>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    {/* Submit Button */}
                    <div className='flex gap-4'>
                        <Button
                            type='button'
                            variant='outline'
                            size='lg'
                            className='flex-1'
                            onClick={handleCancelForm}
                            disabled={form.formState.isSubmitting}
                        >
                            –û—Ç–º–µ–Ω–∞
                        </Button>
                        <Button
                            type='submit'
                            size='lg'
                            disabled={form.formState.isSubmitting}
                            className='flex-1'
                        >
                            {form.formState.isSubmitting ? '–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏...' : '–°–æ–∑–¥–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é'}
                        </Button>
                    </div>
                </form>
            </Form>
        </div>
    );
};

export default CreateSpecificationForm;