'use client'

import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { SPECIFICATION_TYPES } from "@/lib/constants";
import { updateSpecification } from "@/lib/actions/spec-features.actions";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Checkbox } from "@/components/ui/checkbox";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useRouter } from "next/navigation";
import { Category } from "@/types";
import { useState, useEffect } from "react";
import { toast } from "sonner";
import {
    UpdateSpecificationWithCategoriesInput,
    updateSpecificationWithCategoriesSchema
} from "@/lib/validations/specs-features.validation";

interface UpdateSpecificationFormProps {
    specification: any; // –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
    categories: Category[];
}

const UpdateSpecificationForm = ({ specification, categories }: UpdateSpecificationFormProps) => {
    const [serverError, setServerError] = useState<string>('');
    const router = useRouter();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const defaultValues: UpdateSpecificationWithCategoriesInput = {
        id: specification.id,
        name: specification.name,
        key: specification.key,
        description: specification.description || null,
        unit: specification.unit || null,
        type: specification.type,
        icon: specification.icon || null,
        isActive: specification.isActive,
        sortOrder: specification.sortOrder,
        categoryIds: specification.categorySpecs?.map((cs: any) => cs.categoryId) || [],
        isGlobal: specification.categorySpecs?.length === categories.filter(cat => cat.isActive).length,
    };

    const form = useForm<UpdateSpecificationWithCategoriesInput>({
        resolver: zodResolver(updateSpecificationWithCategoriesSchema),
        defaultValues,
        mode: 'onChange'
    });

    const handleNameChange = (value: string) => {
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è key —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª–µ key –ø—É—Å—Ç–æ–µ –∏–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
        const currentKey = form.getValues('key');
        const autoGeneratedKey = specification.name
            .toLowerCase()
            .replace(/[^a-zA-Z0-9\s]/g, '')
            .trim()
            .replace(/\s+/g, '-');

        // –û–±–Ω–æ–≤–ª—è–µ–º key —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π
        if (!currentKey || currentKey === autoGeneratedKey) {
            const generatedKey = value
                .toLowerCase()
                .replace(/[^a-zA-Z0-9\s]/g, '')
                .trim()
                .replace(/\s+/g, '-');

            form.setValue('key', generatedKey, {
                shouldValidate: true,
                shouldDirty: true
            });
        }
    };

    const handleSubmit = async (values: UpdateSpecificationWithCategoriesInput) => {
        try {
            setServerError('');
            console.log('üöÄ Form submitting with values:', values);

            const res = await updateSpecification(values);
            console.log('üìù Response from server:', res);

            if (res.success) {
                toast.success(res.message || '–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
                router.push('/admin/products/specifications');
            } else {
                setServerError(res.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏');
                toast.error(res.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏');
            }
        } catch (error) {
            console.error('‚ùå Client error updating specification:', error);
            const errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏';
            setServerError(errorMessage);
            toast.error(errorMessage);
        }
    };

    const handleCancelForm = () => {
        router.push('/admin/products/specifications');
    };

    const isGlobal = form.watch('isGlobal');

    // –û–±–Ω–æ–≤–ª—è–µ–º categoryIds –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ isGlobal
    useEffect(() => {
        if (isGlobal) {
            const allActiveCategoryIds = categories.filter(cat => cat.isActive).map(cat => cat.id);
            form.setValue('categoryIds', allActiveCategoryIds, {
                shouldValidate: true,
                shouldDirty: true
            });
        }
    }, [isGlobal, categories, form]);

    return (
        <div className="mx-auto py-6">
            <div className="mb-6">
                <h1 className="text-2xl font-bold">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é</h1>
                <p className="text-muted-foreground">–û–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞</p>
            </div>

            <Form {...form}>
                <form
                    onSubmit={form.handleSubmit(handleSubmit)}
                    className='space-y-8'
                    noValidate
                >
                    {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å–µ—Ä–≤–µ—Ä–∞ */}
                    {serverError && (
                        <div className="p-4 mb-4 text-sm text-red-800 rounded-lg bg-red-50 border border-red-200">
                            {serverError}
                        </div>
                    )}

                    {/* Hidden ID field */}
                    <FormField
                        control={form.control}
                        name='id'
                        render={({ field }) => (
                            <Input type="hidden" {...field} />
                        )}
                    />

                    {/* Name */}
                    <FormField
                        control={form.control}
                        name='name'
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>
                                    –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ <span className="text-red-500">*</span>
                                </FormLabel>
                                <FormControl>
                                    <Input
                                        placeholder='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏'
                                        {...field}
                                        onChange={(e) => {
                                            field.onChange(e);
                                            handleNameChange(e.target.value);
                                        }}
                                    />
                                </FormControl>
                                <FormDescription>
                                    –ù–∞–ø—Ä–∏–º–µ—Ä: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç", "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∫–æ–º—Ñ–æ—Ä—Ç–∞", "–í–µ—Å"
                                </FormDescription>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    {/* Key */}
                    <FormField
                        control={form.control}
                        name='key'
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>
                                    –ö–ª—é—á <span className="text-red-500">*</span>
                                </FormLabel>
                                <FormControl>
                                    <Input
                                        placeholder='–ö–ª—é—á —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏'
                                        {...field}
                                    />
                                </FormControl>
                                <FormDescription>
                                    –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                                </FormDescription>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    {/* Type and Unit */}
                    <div className='flex flex-col md:flex-row gap-6 items-start'>
                        <FormField
                            control={form.control}
                            name='type'
                            render={({ field }) => (
                                <FormItem className='flex-1'>
                                    <FormLabel>
                                        –¢–∏–ø <span className="text-red-500">*</span>
                                    </FormLabel>
                                    <Select onValueChange={field.onChange} value={field.value}>
                                        <FormControl>
                                            <SelectTrigger>
                                                <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏" />
                                            </SelectTrigger>
                                        </FormControl>
                                        <SelectContent>
                                            {SPECIFICATION_TYPES.map((type) => (
                                                <SelectItem key={type.value} value={type.value}>
                                                    {type.label}
                                                </SelectItem>
                                            ))}
                                        </SelectContent>
                                    </Select>
                                    <FormDescription>
                                        –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
                                    </FormDescription>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />

                        <FormField
                            control={form.control}
                            name='unit'
                            render={({ field }) => (
                                <FormItem className='flex-1'>
                                    <FormLabel>
                                        –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
                                    </FormLabel>
                                    <FormControl>
                                        <Input
                                            placeholder='–∫–≥, —Å–º, ¬∞C, –ª'
                                            {...field}
                                            value={field.value || ''}
                                        />
                                    </FormControl>
                                    <FormDescription>
                                        –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                                    </FormDescription>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                    </div>

                    {/* Description */}
                    <FormField
                        control={form.control}
                        name='description'
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>
                                    –û–ø–∏—Å–∞–Ω–∏–µ
                                </FormLabel>
                                <FormControl>
                                    <Textarea
                                        placeholder='–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)'
                                        className='resize-none min-h-24'
                                        {...field}
                                        value={field.value || ''}
                                    />
                                </FormControl>
                                <FormDescription>
                                    –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                                </FormDescription>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    {/* Icon Path */}
                    <FormField
                        control={form.control}
                        name='icon'
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>
                                    –ü—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ
                                </FormLabel>
                                <FormControl>
                                    <Input
                                        placeholder='users, thermometer, weight, ruler'
                                        {...field}
                                        value={field.value || ''}
                                    />
                                </FormControl>
                                <FormDescription>
                                    –ò–º—è –∏–∫–æ–Ω–∫–∏ (Lucide, Heroicons) –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                                </FormDescription>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    {/* Is Global Checkbox */}
                    <FormField
                        control={form.control}
                        name='isGlobal'
                        render={({ field }) => (
                            <FormItem className='flex flex-row items-start space-x-3 space-y-0'>
                                <FormControl>
                                    <Checkbox
                                        checked={field.value}
                                        onCheckedChange={field.onChange}
                                        aria-label="–û–±—â–∞—è –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
                                    />
                                </FormControl>
                                <div className='space-y-1 leading-none'>
                                    <FormLabel>
                                        –û–±—â–∞—è –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                                    </FormLabel>
                                    <FormDescription>
                                        –≠—Ç–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
                                    </FormDescription>
                                </div>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    {/* Categories Selection (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ isGlobal) */}
                    {!isGlobal && (
                        <FormField
                            control={form.control}
                            name='categoryIds'
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>
                                        –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
                                    </FormLabel>
                                    <FormDescription>
                                        –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —ç—Ç–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è
                                    </FormDescription>
                                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 mt-3">
                                        {categories.map((category) => (
                                            <div key={category.id} className="flex items-center space-x-2">
                                                <Checkbox
                                                    checked={field.value?.includes(category.id) || false}
                                                    onCheckedChange={(checked) => {
                                                        const currentValue = field.value || [];
                                                        if (checked) {
                                                            field.onChange([...currentValue, category.id]);
                                                        } else {
                                                            field.onChange(currentValue.filter(id => id !== category.id));
                                                        }
                                                    }}
                                                    aria-label={`–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${category.name}`}
                                                />
                                                <label className="text-sm font-medium leading-none cursor-pointer">
                                                    {category.name}
                                                </label>
                                            </div>
                                        ))}
                                    </div>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                    )}

                    {/* Sort Order */}
                    <FormField
                        control={form.control}
                        name='sortOrder'
                        render={({ field }) => (
                            <FormItem className='max-w-xs'>
                                <FormLabel>
                                    –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ <span className="text-red-500">*</span>
                                </FormLabel>
                                <FormControl>
                                    <Input
                                        type='number'
                                        placeholder='0'
                                        {...field}
                                        onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : 0)}
                                    />
                                </FormControl>
                                <FormDescription>
                                    –ú–µ–Ω—å—à–∏–µ —á–∏—Å–ª–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–µ—Ä–≤—ã–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 0 –¥–ª—è –≤—ã—Å—à–µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.
                                </FormDescription>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    {/* Is Active Checkbox */}
                    <FormField
                        control={form.control}
                        name='isActive'
                        render={({ field }) => (
                            <FormItem className='flex flex-row items-start space-x-3 space-y-0'>
                                <FormControl>
                                    <Checkbox
                                        checked={field.value}
                                        onCheckedChange={field.onChange}
                                        aria-label="–ê–∫—Ç–∏–≤–Ω–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è"
                                    />
                                </FormControl>
                                <div className='space-y-1 leading-none'>
                                    <FormLabel>
                                        –ê–∫—Ç–∏–≤–Ω–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è
                                    </FormLabel>
                                    <FormDescription>
                                        –≠—Ç–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–æ–≤–∞—Ä–∞—Ö
                                    </FormDescription>
                                </div>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    {/* Submit Button */}
                    <div className='flex gap-4'>
                        <Button
                            type='button'
                            variant='outline'
                            size='lg'
                            className='flex-1'
                            onClick={handleCancelForm}
                            disabled={form.formState.isSubmitting}
                        >
                            –û—Ç–º–µ–Ω–∞
                        </Button>
                        <Button
                            type='submit'
                            size='lg'
                            disabled={form.formState.isSubmitting}
                            className='flex-1'
                        >
                            {form.formState.isSubmitting ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é'}
                        </Button>
                    </div>
                </form>
            </Form>
        </div>
    );
};

export default UpdateSpecificationForm;