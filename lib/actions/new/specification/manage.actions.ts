// lib/actions/new/specification/manage.actions.ts
// –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏ (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)

"use server";

import { prisma } from "@/db/prisma";
import { formatError } from "@/lib/utils";
import { revalidatePath, revalidateTag } from "next/cache";
import {
  CreateSpecificationSchema,
  UpdateSpecificationSchema,
  CreateSpecificationInput,
  UpdateSpecificationInput,
} from "@/lib/validations/new/specification.validation";

/**
 * ============================================================================
 * SPECIFICATION MANAGEMENT ACTIONS - –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
 * ============================================================================
 */

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 */
export async function createSpecification(data: CreateSpecificationInput) {
  try {
    console.log("üöÄ Server received data:", data);
    console.log("üñºÔ∏è Server iconImage field:", data.iconImage);
    const validatedData = CreateSpecificationSchema.parse(data);
    console.log("‚úÖ Validated data:", validatedData);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞
    const existingSpecification = await prisma.specification.findUnique({
      where: { key: validatedData.key },
    });

    if (existingSpecification) {
      return {
        success: false,
        message: "–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è —Å —Ç–∞–∫–∏–º –∫–ª—é—á–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
      };
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    let targetCategoryIds: string[] = [];

    if (validatedData.isGlobal) {
      const allActiveCategories = await prisma.category.findMany({
        where: { isActive: true },
        select: { id: true },
      });
      targetCategoryIds = allActiveCategories.map((cat) => cat.id);
    } else if (validatedData.categoryIds) {
      targetCategoryIds = validatedData.categoryIds;
    }

    // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ —Å–≤—è–∑–∏ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const result = await prisma.$transaction(async (tx) => {
      // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é
      const createData = {
        name: validatedData.name,
        key: validatedData.key,
        description: validatedData.description || null,
        unit: validatedData.unit || null,
        type: validatedData.type,
        options: validatedData.options || [],
        icon: validatedData.iconImage || null,
        isActive: validatedData.isActive,
        sortOrder: validatedData.sortOrder,
      };
      console.log("üìù Creating specification with data:", createData);
      const specification = await tx.specification.create({
        data: createData,
      });

      // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
      if (targetCategoryIds.length > 0) {
        const categorySpecsData = targetCategoryIds.map((categoryId) => ({
          categoryId,
          specificationId: specification.id,
          isRequired: false,
          sortOrder: 0,
        }));

        await tx.categorySpecification.createMany({
          data: categorySpecsData,
        });
      }

      return specification;
    });

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∫–µ—à–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π
    revalidateTag("specifications");
    revalidateTag("specifications-light");
    revalidateTag("specifications-full");
    revalidateTag("specifications-by-category");
    revalidatePath("/admin/products/specifications");

    const successMessage = `–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞${
      validatedData.isGlobal
        ? " –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
        : targetCategoryIds.length > 0
        ? ` –¥–ª—è ${targetCategoryIds.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`
        : ""
    }`;

    return {
      success: true,
      data: { id: result.id },
      message: successMessage,
    };
  } catch (error) {
    return {
      success: false,
      message: formatError(error),
    };
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –µ—ë —Å–≤—è–∑–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
 */
export async function updateSpecification(data: UpdateSpecificationInput) {
  try {
    const validatedData = UpdateSpecificationSchema.parse(data);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é)
    if (validatedData.key) {
      const existingSpecification = await prisma.specification.findFirst({
        where: {
          key: validatedData.key,
          NOT: { id: validatedData.id },
        },
      });

      if (existingSpecification) {
        return {
          success: false,
          message: "–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è —Å —Ç–∞–∫–∏–º –∫–ª—é—á–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
        };
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    let targetCategoryIds: string[] = [];

    if (validatedData.isGlobal) {
      const allActiveCategories = await prisma.category.findMany({
        where: { isActive: true },
        select: { id: true },
      });
      targetCategoryIds = allActiveCategories.map((cat) => cat.id);
    } else if (validatedData.categoryIds) {
      targetCategoryIds = validatedData.categoryIds;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ —Å–≤—è–∑–∏ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const result = await prisma.$transaction(async (tx) => {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é
      const specification = await tx.specification.update({
        where: { id: validatedData.id },
        data: {
          ...(validatedData.name && { name: validatedData.name }),
          ...(validatedData.key && { key: validatedData.key }),
          ...(validatedData.description !== undefined && {
            description: validatedData.description,
          }),
          ...(validatedData.unit !== undefined && { unit: validatedData.unit }),
          ...(validatedData.type && { type: validatedData.type }),
          ...(validatedData.options !== undefined && {
            options: validatedData.options,
          }),
          ...(validatedData.iconImage !== undefined && {
            icon: validatedData.iconImage,
          }),
          ...(validatedData.isActive !== undefined && {
            isActive: validatedData.isActive,
          }),
          ...(validatedData.sortOrder !== undefined && {
            sortOrder: validatedData.sortOrder,
          }),
        },
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
      if (
        validatedData.isGlobal !== undefined ||
        validatedData.categoryIds !== undefined
      ) {
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–≤—è–∑–∏
        await tx.categorySpecification.deleteMany({
          where: { specificationId: validatedData.id },
        });

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏
        if (targetCategoryIds.length > 0) {
          await tx.categorySpecification.createMany({
            data: targetCategoryIds.map((categoryId) => ({
              categoryId,
              specificationId: validatedData.id,
              isRequired: false,
              sortOrder: 0,
            })),
          });
        }
      }

      return specification;
    });

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∫–µ—à–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π
    revalidateTag("specifications");
    revalidateTag("specifications-light");
    revalidateTag("specifications-full");
    revalidateTag("specifications-by-category");
    revalidatePath("/admin/products/specifications");

    return {
      success: true,
      data: { id: result.id },
      message: "–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
    };
  } catch (error) {
    return {
      success: false,
      message: formatError(error),
    };
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤)
 */
export async function deleteSpecification(
  id: string
): Promise<{ success: boolean; message: string }> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    const specWithProducts = await prisma.specification.findUnique({
      where: { id },
      include: {
        _count: {
          select: {
            productSpecifications: true,
          },
        },
      },
    });

    if (!specWithProducts) {
      return {
        success: false,
        message: "–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
      };
    }

    if (specWithProducts._count.productSpecifications > 0) {
      return {
        success: false,
        message: `–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é. –ö –Ω–µ–π –ø—Ä–∏–≤—è–∑–∞–Ω–æ ${specWithProducts._count.productSpecifications} —Ç–æ–≤–∞—Ä–æ–≤`,
      };
    }

    // –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é (—Å–≤—è–∑–∏ —É–¥–∞–ª—è—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω–æ)
    await prisma.specification.delete({
      where: { id },
    });

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∫–µ—à–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π
    revalidateTag("specifications");
    revalidateTag("specifications-light");
    revalidateTag("specifications-full");
    revalidateTag("specifications-by-category");
    revalidatePath("/admin/products/specifications");

    return {
      success: true,
      message: "–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞",
    };
  } catch (error) {
    return {
      success: false,
      message: formatError(error),
    };
  }
}
